// <auto-generated />
using System;
using FantasyLeagueProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyLeagueProject.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221229082256_EntitiesAdded")]
    partial class EntitiesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("FantasyLeagueProject.Entities.HistoryTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryTeams");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Performance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Budget")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ChangeTeamEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRounds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RoundPerfomancesAdded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HistoryTeamPlayer", b =>
                {
                    b.Property<Guid>("HistoryTeamsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayersId")
                        .HasColumnType("TEXT");

                    b.HasKey("HistoryTeamsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("HistoryTeamPlayer");
                });

            modelBuilder.Entity("PlayerUser", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PlayerUser");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<Guid>("LikedByUsersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LikedPostsId")
                        .HasColumnType("TEXT");

                    b.HasKey("LikedByUsersId", "LikedPostsId");

                    b.HasIndex("LikedPostsId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.HistoryTeam", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.Tournament", null)
                        .WithMany("HistoryTeams")
                        .HasForeignKey("TournamentId");

                    b.HasOne("FantasyLeagueProject.Entities.User", null)
                        .WithMany("HistoryTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Performance", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.Player", null)
                        .WithMany("Performances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Player", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.Tournament", null)
                        .WithMany("Players")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.User", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.Tournament", null)
                        .WithMany("Users")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("HistoryTeamPlayer", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.HistoryTeam", null)
                        .WithMany()
                        .HasForeignKey("HistoryTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeagueProject.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerUser", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeagueProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("FantasyLeagueProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeagueProject.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Player", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.Tournament", b =>
                {
                    b.Navigation("HistoryTeams");

                    b.Navigation("Players");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FantasyLeagueProject.Entities.User", b =>
                {
                    b.Navigation("HistoryTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
